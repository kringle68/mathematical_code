#!/usr/bin/perl
use strict;
use warnings;
use Carp;
use Data::Dumper;
use Getopt::Long;

#PROBLEM 1
#If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
#Find the sum of all the multiples of 3 or 5 below 1000.

#~ my ( $ceiling, $help );
#~ 
#~ GetOptions(
    #~ 'c|ceiling=i'               => \$ceiling,
    #~ 'h|help'                    => \$help,
#~ );
#~ 
#~ ( $ceiling && !$help ) or die <<USAGE;
#~ Usage: $0   
  #~ -c|--ceiling				   <number BELOW which we calculate sum of multiples of 3 or 5>
  #~ -h|--help                    <this message>
#~ USAGE
#~ 
#~ my $sum = 0;
#~ foreach ( 1 .. $ceiling - 1) {
	#~ if ( $_ % 3 == 0 || $_ % 5 == 0) {
		#~ $sum += $_;
	#~ }
#~ }
#~ print "Sum below $ceiling = $sum\n";

#PROBLEM 2
#Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
#1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

#~ my ( $ceiling, $help );
#~ 
#~ GetOptions(
    #~ 'c|ceiling=i'               => \$ceiling,
    #~ 'h|help'                    => \$help,
#~ );
#~ 
#~ ( $ceiling && !$help ) or die <<USAGE;
#~ Usage: $0   
  #~ -c|--ceiling				  <number BELOW which we calculate sum of even members of Fibonacci series>
  #~ -h|--help                    <this message>
#~ USAGE
#~ 
#~ my @series = get_fibonacci($ceiling);
#~ my $sum = 0;
#~ foreach ( @series ) {
	#~ if ( $_ % 2 == 0 ) {
		#~ $sum += $_;
	#~ }
#~ }
#~ print "Sum below $ceiling = $sum\n";
#~ 
#~ sub get_fibonacci
#~ {
	#~ my ($max) = @_;
	#~ my @fibseries = (1, 2);
	#~ while ( ($fibseries[-1] + $fibseries[-2]) < $max ) {
		#~ push @fibseries, $fibseries[-1] + $fibseries[-2];
	#~ }
	#~ print Dumper \@fibseries, "\n";
	#~ return @fibseries;
#~ }

#PROBLEM 3
#The prime factors of 13195 are 5, 7, 13 and 29.
#What is the largest prime factor of the number 600851475143

#~ my ( $ceiling, $help );
#~ 
#~ GetOptions(
    #~ 'c|ceiling=i'               => \$ceiling,
    #~ 'h|help'                    => \$help,
#~ );
#~ 
#~ ( $ceiling && !$help ) or die <<USAGE;
#~ Usage: $0   
  #~ -c|--ceiling				   <number to calculate prime factors for>
  #~ -h|--help                    <this message>
#~ USAGE
#~ 
#~ print "Largest prime factor for $ceiling = ".largestprime($ceiling)."\n";sub largestprime
#~ 
#~ {
	#~ my ($num) = @_;
	#~ my $i;
	#~ return largestprime(max(2, $num/2)) if($num % 2 == 0);
	#~ my $snum = int(sqrt($num));
	#~ for ($i = 3; $i <= $snum; $i += 2)  {    
		#~ if($num % $i == 0) {
			#~ last;    
		#~ }   
	#~ }   
	#~ if($i > $snum) {
		#~ return $num;
	#~ }
	#~ else
	#~ {
		#~ return max($i, largestprime($num/$i));
	#~ }
#~ }
#~ 
#~ sub max($$)
#~ {
	#~ return (sort { $a <=> $b }(@_))[1];
#~ }

#PROBLEM 4
#A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 99.
#Find the largest palindrome made from the product of two 3-digit numbers.

#~ my ( $digits, $help );
#~ 
#~ GetOptions(
    #~ 'd|digits=i'      => \$digits,
    #~ 'h|help'          => \$help,
#~ );
#~ 
#~ ( $digits && !$help ) or die <<USAGE;
#~ Usage: $0   
  #~ -d|--digits				   <number of digits to calculate palindrome>
  #~ -h|--help                    <this message>
#~ USAGE
#~ 
#~ 
#~ my $max = (10 ** $digits) - 1;
#~ my $maxpalindrome = 0;
#~ for ( my $i = $max; $i > 0; $i--) {
	#~ for ( my $j = $max; $j > 0; $j--) {
		#~ my $product = $i * $j;
		#~ if (($product == reverse $product) && ($product > $maxpalindrome) ) {
			#~ $maxpalindrome = $product;
		#~ }
	#~ }
#~ }
#~ print "Maximimum palindrome for $digits digits = $maxpalindrome\n";

#PROBLEM 5
#2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
#What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

#~ my ( $max, $help );
#~ 
#~ GetOptions(
    #~ 'm|max=i'       => \$max,
    #~ 'h|help'        => \$help,
#~ );
#~ 
#~ ( $max && $max > 0 && !$help ) or die <<USAGE;
#~ Usage: $0   
  #~ -m|--max			  <maximum value of POSITIVE integer for calculation of divisor>
  #~ -h|--help           <this message>
#~ USAGE
#~ 
#~ my $found = 0;
#~ my $divisor = $max == 1 ? 1 : $max == 2 ? 2 : $max % 2 == 0 ? $max * ($max - 1) * ( ($max - 2) / 2 ) : $max * ($max - 1) * ($max - 2);
#~ my $adder = $divisor;
#~ while ( !$found ) {
  #~ my $check = check_divisor($divisor, $max);
  #~ if ( $check ) {
    #~ $found = 1;
  #~ }
  #~ else {
    #~ $divisor = $divisor + $adder;
  #~ }
#~ }  
#~ 
#~ sub check_divisor
#~ {
  #~ my ($checker, $digits) = @_;
  #~ foreach ( 1 .. $digits ) {
    #~ return 0 if $checker % $_ != 0;
  #~ }
  #~ return 1;
#~ }
#~ print "Minimum complete divisor for 1 to $max is digits = $divisor\n";

#PROBLEM 6
#~ The sum of the squares of the first ten natural numbers is,
#~ 
#~ 1^2 + 2^2 + ... + 10^2 = 385
#~ The square of the sum of the first ten natural numbers is,
#~ 
#~ (1 + 2 + ... + 10)^2 = 552 = 3025
#~ Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025  385 = 2640.
#~ 
#~ Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.

#~ my ( $max, $help );
#~ 
#~ GetOptions(
    #~ 'm|max=i'       => \$max,
    #~ 'h|help'        => \$help,
#~ );
#~ 
#~ ( $max && $max > 0 && !$help ) or die <<USAGE;
#~ Usage: $0   
  #~ -m|--max			  <maximum value for sum of squares calculation>
  #~ -h|--help           <this message>
#~ USAGE
#~ 
#~ my $sumnum;
#~ my $sum_of_squares;
#~ 
#~ foreach (1 .. $max) {
	#~ $sumnum += $_;
	#~ $sum_of_squares += $_ ** 2;
#~ } 
#~ 
#~ my $square_of_sums = $sumnum ** 2;
#~ 
#~ print "Square of sums for 1 to $max = $square_of_sums\n";
#~ print "Sum of squares for 1 to $max = $sum_of_squares\n";
#~ print "The difference is ", $square_of_sums - $sum_of_squares, "\n";


#PROBLEM 7
#By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
#What is the 10 001st prime number?

#~ my ( $max, $help );
#~ 
#~ GetOptions(
    #~ 'm|max=i'       => \$max,
    #~ 'h|help'        => \$help,
#~ );
#~ 
#~ ( $max && $max > 0 && !$help ) or die <<USAGE;
#~ Usage: $0   
  #~ -m|--max			  <value for prime nubmer>
  #~ -h|--help           <this message>
#~ USAGE
#~ 
#~ 
#~ my $primecount = 0;
#~ my $n = 1;
#~ while ( $primecount < $max ) {
	#~ $n++;
	#~ $primecount++ if isprime($n);
#~ } 
#~ 
#~ print "\nThe prime number in position $max is $n\n";
#~ 
#~ sub isprime {
  #~ my ($num) = @_;
  #~ return 0 if $num < 2;
  #~ return 1 if ($num == 2 || $num == 3);
  #~ for (my $i = 2; $i < (sqrt($num) + 1); $i++) { 
	  #~ return 0 if ($num % $i == 0); 
  #~ }
  #~ print "$num\t";
  #~ return 1;
#~ }

#PROBLEM 8
#~ Find the greatest product of five consecutive digits in the 1000-digit number.
#~ 
#~ 73167176531330624919225119674426574742355349194934
#~ 96983520312774506326239578318016984801869478851843
#~ 85861560789112949495459501737958331952853208805511
#~ 12540698747158523863050715693290963295227443043557
#~ 66896648950445244523161731856403098711121722383113
#~ 62229893423380308135336276614282806444486645238749
#~ 30358907296290491560440772390713810515859307960866
#~ 70172427121883998797908792274921901699720888093776
#~ 65727333001053367881220235421809751254540594752243
#~ 52584907711670556013604839586446706324415722155397
#~ 53697817977846174064955149290862569321978468622482
#~ 83972241375657056057490261407972968652414535100474
#~ 82166370484403199890008895243450658541227588666881
#~ 16427171479924442928230863465674813919123162824586
#~ 17866458359124566529476545682848912883142607690042
#~ 24219022671055626321111109370544217506941658960408
#~ 07198403850962455444362981230987879927244284909188
#~ 84580156166097919133875499200524063689912560717606
#~ 05886116467109405077541002256983155200055935729725
#~ 71636269561882670428252483600823257530420752963450

#~ open NUM, "<", 'prob8.txt';
#~ 
#~ my $maxproduct = 0;
#~ my %numbers;
#~ my $counter = 1;
#~ while ( <NUM> ) {
	#~ chomp;
	#~ $numbers{$counter} = $_;
	#~ $counter++;
#~ }
#~ 
#~ for ( my $i = 1; $i < 997; $i++ ) {
	#~ my $product = 1;
	#~ for ( 0 .. 4 ) {
		#~ $product = $product * $numbers{$i + $_};
	#~ }
	#~ $maxproduct = $product if $product > $maxproduct;
#~ }
#~ print "Max product = $maxproduct\n";	

#PROBLEM 9 
#~ A Pythagorean triplet is a set of three natural numbers, a  b  c, for which,
#~ 
#~ a^2 + b^2 = c^2
#~ For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.
#~ 
#~ There exists exactly one Pythagorean triplet for which a + b + c = 1000.
#~ Find the product abc.

#~ my ( $max, $help );
#~ 
#~ GetOptions(
    #~ 'm|max=i'       => \$max,
    #~ 'h|help'        => \$help,
#~ );
#~ 
#~ ( $max && $max > 0 && !$help ) or die <<USAGE;
#~ Usage: $0   
  #~ -m|--max			  <maximum value of POSITIVE integer for calculation of divisor>
  #~ -h|--help           <this message>
#~ USAGE
#~ 
#~ 
#~ for my $a ( 3 .. ($max-3)/3 ) {
	#~ for my $b ( $a+1 .. ($max-1-$a)/2 ) {
	    #~ my $c = $max - $a -$b;
	    #~ if ($a ** 2 + $b ** 2 == $c ** 2) {
			#~ print "ABC: $a, $b, $c\n";
			#~ print "Product = ", $a * $b * $c, "\n";
		#~ }
	#~ }
#~ }

#PROBLEM 10
#The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
#Find the sum of all the primes below two million.

my ( $max, $help );

GetOptions(
    'm|max=i'       => \$max,
    'h|help'        => \$help,
);

( $max && $max > 0 && !$help ) or die <<USAGE;
Usage: $0   
  -m|--max			  <max value for prime number>
  -h|--help           <this message>
USAGE


my $total = 0;
my %notprimes;
PRIMES: foreach my $num ( 2 .. $max ) {
	next PRIMES if $notprimes{$num};
	$total = $total + $num;
    for (my $mul = $num + $num; $mul <= $max; $mul += $num) {
        $notprimes{$mul} = 1;
    }	
}
print "\nThe sum of all primes below $max is $total\n";


#FROM forum -> using a vector:
#
#~ my $UPPER = $max;
#~ my $sieve = "";
#~ my $sum = 0;
#~ GUESS: for (my $guess = 2; $guess <= $UPPER; $guess++) {
    #~ next GUESS if vec($sieve,$guess,1);
#~ #    print "$guess\n" if $count++ % 10000 == 0;
    #~ $sum += $guess;
    #~ for (my $mults = $guess * $guess; $mults <= $UPPER; $mults += $guess) {
        #~ vec($sieve,$mults,1) = 1;
    #~ }
#~ }
#~ print "\nThe sum of all primes below $max is $sum\n";
